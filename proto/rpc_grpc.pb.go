// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: rpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCenterClient is the client API for UserCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCenterClient interface {
	Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResToken, error)
	Register(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*ResToken, error)
	GetCode(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResCode, error)
	GetUser(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*UserSide, error)
	GetIntroduction(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error)
	GetQuestion(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error)
	GetSign(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error)
	GetAnswer(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error)
	CreateIntroduction(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
	CreateQuestion(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
	CreateSign(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
	CreateAnswer(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
	CreateAvatar(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
	UpdatePwd(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error)
}

type userCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCenterClient(cc grpc.ClientConnInterface) UserCenterClient {
	return &userCenterClient{cc}
}

func (c *userCenterClient) Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResToken, error) {
	out := new(ResToken)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) Register(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*ResToken, error) {
	out := new(ResToken)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetCode(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResCode, error) {
	out := new(ResCode)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUser(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*UserSide, error) {
	out := new(UserSide)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetIntroduction(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error) {
	out := new(ResUser)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetIntroduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetQuestion(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error) {
	out := new(ResUser)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetSign(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error) {
	out := new(ResUser)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetAnswer(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*ResUser, error) {
	out := new(ResUser)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateIntroduction(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/CreateIntroduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateQuestion(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateSign(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/CreateSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateAnswer(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/CreateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateAvatar(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) UpdatePwd(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/proto.UserCenter/UpdatePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCenterServer is the server API for UserCenter service.
// All implementations must embed UnimplementedUserCenterServer
// for forward compatibility
type UserCenterServer interface {
	Login(context.Context, *ReqUser) (*ResToken, error)
	Register(context.Context, *UserInfo) (*ResToken, error)
	GetCode(context.Context, *ReqUser) (*ResCode, error)
	GetUser(context.Context, *ReqUser) (*UserSide, error)
	GetIntroduction(context.Context, *ReqUser) (*ResUser, error)
	GetQuestion(context.Context, *ReqUser) (*ResUser, error)
	GetSign(context.Context, *ReqUser) (*ResUser, error)
	GetAnswer(context.Context, *ReqUser) (*ResUser, error)
	CreateIntroduction(context.Context, *ReqUser) (*Res, error)
	CreateQuestion(context.Context, *ReqUser) (*Res, error)
	CreateSign(context.Context, *ReqUser) (*Res, error)
	CreateAnswer(context.Context, *ReqUser) (*Res, error)
	CreateAvatar(context.Context, *ReqUser) (*Res, error)
	UpdatePwd(context.Context, *ReqUser) (*Res, error)
	mustEmbedUnimplementedUserCenterServer()
}

// UnimplementedUserCenterServer must be embedded to have forward compatible implementations.
type UnimplementedUserCenterServer struct {
}

func (UnimplementedUserCenterServer) Login(context.Context, *ReqUser) (*ResToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserCenterServer) Register(context.Context, *UserInfo) (*ResToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserCenterServer) GetCode(context.Context, *ReqUser) (*ResCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedUserCenterServer) GetUser(context.Context, *ReqUser) (*UserSide, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserCenterServer) GetIntroduction(context.Context, *ReqUser) (*ResUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntroduction not implemented")
}
func (UnimplementedUserCenterServer) GetQuestion(context.Context, *ReqUser) (*ResUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedUserCenterServer) GetSign(context.Context, *ReqUser) (*ResUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSign not implemented")
}
func (UnimplementedUserCenterServer) GetAnswer(context.Context, *ReqUser) (*ResUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedUserCenterServer) CreateIntroduction(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntroduction not implemented")
}
func (UnimplementedUserCenterServer) CreateQuestion(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedUserCenterServer) CreateSign(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSign not implemented")
}
func (UnimplementedUserCenterServer) CreateAnswer(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedUserCenterServer) CreateAvatar(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedUserCenterServer) UpdatePwd(context.Context, *ReqUser) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwd not implemented")
}
func (UnimplementedUserCenterServer) mustEmbedUnimplementedUserCenterServer() {}

// UnsafeUserCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCenterServer will
// result in compilation errors.
type UnsafeUserCenterServer interface {
	mustEmbedUnimplementedUserCenterServer()
}

func RegisterUserCenterServer(s grpc.ServiceRegistrar, srv UserCenterServer) {
	s.RegisterService(&UserCenter_ServiceDesc, srv)
}

func _UserCenter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).Login(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).Register(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetCode(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUser(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetIntroduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetIntroduction(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetQuestion(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetSign(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetAnswer(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateIntroduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateIntroduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/CreateIntroduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateIntroduction(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateQuestion(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/CreateSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateSign(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/CreateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateAnswer(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateAvatar(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_UpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCenter/UpdatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UpdatePwd(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCenter_ServiceDesc is the grpc.ServiceDesc for UserCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserCenter",
	HandlerType: (*UserCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserCenter_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserCenter_Register_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _UserCenter_GetCode_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserCenter_GetUser_Handler,
		},
		{
			MethodName: "GetIntroduction",
			Handler:    _UserCenter_GetIntroduction_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _UserCenter_GetQuestion_Handler,
		},
		{
			MethodName: "GetSign",
			Handler:    _UserCenter_GetSign_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _UserCenter_GetAnswer_Handler,
		},
		{
			MethodName: "CreateIntroduction",
			Handler:    _UserCenter_CreateIntroduction_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _UserCenter_CreateQuestion_Handler,
		},
		{
			MethodName: "CreateSign",
			Handler:    _UserCenter_CreateSign_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _UserCenter_CreateAnswer_Handler,
		},
		{
			MethodName: "CreateAvatar",
			Handler:    _UserCenter_CreateAvatar_Handler,
		},
		{
			MethodName: "UpdatePwd",
			Handler:    _UserCenter_UpdatePwd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
